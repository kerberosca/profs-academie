
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function weeklyMaintenance() {
  console.log('üîß Maintenance hebdomadaire de la base de donn√©es...');
  
  try {
    // V√©rifier l'int√©grit√© des donn√©es
    const orphanChildren = await prisma.enfant.findMany({
      where: {
        foyer: null
      }
    });
    
    if (orphanChildren.length > 0) {
      console.log(`‚ö†Ô∏è ${orphanChildren.length} enfants orphelins d√©tect√©s`);
    }
    
    // V√©rifier les sessions sans calendrier
    const orphanSessions = await prisma.sessionEtude.findMany({
      where: {
        calendrier: null
      }
    });
    
    if (orphanSessions.length > 0) {
      console.log(`‚ö†Ô∏è ${orphanSessions.length} sessions orphelines d√©tect√©es`);
    }
    
    // G√©n√©rer un rapport de sant√©
    const healthReport = {
      timestamp: new Date().toISOString(),
      users: await prisma.user.count(),
      foyers: await prisma.foyer.count(),
      enfants: await prisma.enfant.count(),
      cours: await prisma.coursGouvernemental.count(),
      progressions: await prisma.progressionCours.count(),
      competences: await prisma.competence.count(),
      contenus: await prisma.contenuApprentissage.count()
    };
    
    const fs = require('fs');
    fs.writeFileSync(
      `health-report-${new Date().toISOString().split('T')[0]}.json`,
      JSON.stringify(healthReport, null, 2)
    );
    
    console.log('‚úÖ Rapport de sant√© hebdomadaire g√©n√©r√©');
    console.log('‚úÖ Maintenance hebdomadaire termin√©e');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la maintenance:', error);
  } finally {
    await prisma.$disconnect();
  }
}

weeklyMaintenance();
