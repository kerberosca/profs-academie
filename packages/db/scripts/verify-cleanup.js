const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function verifyCleanup() {
  console.log('üîç V√©rification finale du nettoyage et de l\'activation...\n');
  
  const verification = {
    timestamp: new Date().toISOString(),
    status: 'SUCCESS',
    metrics: {},
    issues: [],
    recommendations: []
  };

  try {
    // 1. V√©rifier l'√©tat des tables principales
    console.log('üìä V√©rification de l\'√©tat des tables:');
    
    const tableChecks = [
      { name: 'users', model: prisma.user, label: 'üë• Utilisateurs' },
      { name: 'foyers', model: prisma.foyer, label: 'üè† Foyers' },
      { name: 'enfants', model: prisma.enfant, label: 'üë∂ Enfants' },
      { name: 'cours_gouvernementaux', model: prisma.coursGouvernemental, label: 'üìö Cours' },
      { name: 'progressions_cours', model: prisma.progressionCours, label: 'üìà Progressions' },
      { name: 'competences', model: prisma.competence, label: 'üéØ Comp√©tences' },
      { name: 'contenus_apprentissage', model: prisma.contenuApprentissage, label: 'üìñ Contenus' },
      { name: 'abonnements', model: prisma.abonnements, label: 'üí≥ Abonnements' },
      { name: 'audit_logs', model: prisma.audit_logs, label: 'üìù Audit logs' }
    ];

    for (const check of tableChecks) {
      const count = await check.model.count();
      verification.metrics[check.name] = count;
      console.log(`${check.label}: ${count} enregistrements`);
    }

    // 2. V√©rifier l'int√©grit√© des relations
    console.log('\nüîç V√©rification de l\'int√©grit√© des relations:');
    
    // Utilisateurs avec foyer
    const usersWithFoyer = await prisma.user.count({
      where: { foyer: { isNot: null } }
    });
    const totalUsers = verification.metrics.users;
    const userFoyerRatio = totalUsers > 0 ? (usersWithFoyer / totalUsers * 100).toFixed(1) : 0;
    console.log(`üë• Utilisateurs avec foyer: ${usersWithFoyer}/${totalUsers} (${userFoyerRatio}%)`);
    
    if (userFoyerRatio < 100) {
      verification.issues.push(`${totalUsers - usersWithFoyer} utilisateurs sans foyer`);
    }

    // Enfants avec foyer
    const enfantsWithFoyer = await prisma.enfant.count({
      where: { foyer: { isNot: null } }
    });
    const totalEnfants = verification.metrics.enfants;
    const enfantFoyerRatio = totalEnfants > 0 ? (enfantsWithFoyer / totalEnfants * 100).toFixed(1) : 0;
    console.log(`üë∂ Enfants avec foyer: ${enfantsWithFoyer}/${totalEnfants} (${enfantFoyerRatio}%)`);
    
    if (enfantFoyerRatio < 100) {
      verification.issues.push(`${totalEnfants - enfantsWithFoyer} enfants sans foyer`);
    }

    // Progressions actives
    const progressionsActives = await prisma.progressionCours.count({
      where: {
        OR: [
          { pourcentage: { gt: 0 } },
          { tempsPasse: { gt: 0 } },
          { statut: { in: ['EN_COURS', 'TERMINE'] } }
        ]
      }
    });
    const totalProgressions = verification.metrics.progressions_cours;
    const progressionRatio = totalProgressions > 0 ? (progressionsActives / totalProgressions * 100).toFixed(1) : 0;
    console.log(`üìà Progressions actives: ${progressionsActives}/${totalProgressions} (${progressionRatio}%)`);

    // 3. V√©rifier les syst√®mes activ√©s
    console.log('\n‚úÖ V√©rification des syst√®mes activ√©s:');
    
    // Syst√®me de progression
    if (verification.metrics.progressions_cours > 0) {
      console.log('‚úÖ Syst√®me de progression des cours: ACTIF');
    } else {
      console.log('‚ùå Syst√®me de progression des cours: INACTIF');
      verification.issues.push('Syst√®me de progression inactif');
    }

    // Syst√®me d'audit
    if (verification.metrics.audit_logs > 0) {
      console.log('‚úÖ Syst√®me de logs d\'audit: ACTIF');
    } else {
      console.log('‚ùå Syst√®me de logs d\'audit: INACTIF');
      verification.issues.push('Syst√®me d\'audit inactif');
    }

    // Syst√®me d'abonnement
    if (verification.metrics.abonnements > 0) {
      console.log('‚úÖ Syst√®me d\'abonnement: ACTIF');
    } else {
      console.log('‚ùå Syst√®me d\'abonnement: INACTIF');
      verification.issues.push('Syst√®me d\'abonnement inactif');
    }

    // 4. Calculer le score de sant√© final
    const activeTables = Object.values(verification.metrics).filter(count => count > 0).length;
    const totalTables = Object.keys(verification.metrics).length;
    const healthScore = Math.round((activeTables / totalTables) * 100);
    
    verification.metrics.healthScore = healthScore;
    verification.metrics.activeTables = activeTables;
    verification.metrics.totalTables = totalTables;

    console.log(`\nüè• Score de sant√© final: ${healthScore}%`);
    console.log(`üìä Tables actives: ${activeTables}/${totalTables}`);

    // 5. √âvaluer le succ√®s du nettoyage
    if (healthScore >= 85 && verification.issues.length === 0) {
      verification.status = 'EXCELLENT';
      console.log('üéâ Nettoyage et activation EXCELLENTS !');
    } else if (healthScore >= 75 && verification.issues.length <= 2) {
      verification.status = 'GOOD';
      console.log('‚úÖ Nettoyage et activation R√âUSSIS !');
    } else if (healthScore >= 60) {
      verification.status = 'FAIR';
      console.log('‚ö†Ô∏è Nettoyage et activation ACCEPTABLES');
    } else {
      verification.status = 'POOR';
      console.log('‚ùå Nettoyage et activation INSUFFISANTS');
    }

    // 6. G√©n√©rer les recommandations finales
    if (verification.issues.length > 0) {
      console.log('\n‚ö†Ô∏è Probl√®mes d√©tect√©s:');
      verification.issues.forEach(issue => {
        console.log(`- ${issue}`);
      });
    }

    // Recommandations bas√©es sur l'√©tat final
    if (healthScore < 90) {
      verification.recommendations.push('Continuer l\'optimisation des syst√®mes inactifs');
    }
    
    if (verification.metrics.progressions_cours === 0) {
      verification.recommendations.push('Activer le syst√®me de progression des cours');
    }
    
    if (verification.metrics.audit_logs === 0) {
      verification.recommendations.push('Activer les logs d\'audit pour la s√©curit√©');
    }

    if (verification.recommendations.length > 0) {
      console.log('\nüí° Recommandations finales:');
      verification.recommendations.forEach(rec => console.log(`- ${rec}`));
    }

    // 7. R√©sum√© final
    console.log('\nüìã R√©sum√© final:');
    console.log(`Status: ${verification.status}`);
    console.log(`Score de sant√©: ${healthScore}%`);
    console.log(`Probl√®mes d√©tect√©s: ${verification.issues.length}`);
    console.log(`Recommandations: ${verification.recommendations.length}`);

    // Sauvegarder le rapport de v√©rification
    const fs = require('fs');
    fs.writeFileSync(
      'database-verification-report.json',
      JSON.stringify(verification, null, 2)
    );

    console.log('\n‚úÖ Rapport de v√©rification sauvegard√© dans database-verification-report.json');

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
    verification.status = 'ERROR';
    verification.error = error.message;
  } finally {
    await prisma.$disconnect();
  }
}

verifyCleanup();
