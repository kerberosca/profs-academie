const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function activateSystems() {
  console.log('üîß Activation des syst√®mes inactifs...\n');
  
  const activation = {
    timestamp: new Date().toISOString(),
    activatedSystems: [],
    createdRecords: {},
    recommendations: []
  };

  try {
    // 1. Activer le syst√®me de progression des cours
    console.log('üìà Activation du syst√®me de progression des cours...');
    
    // R√©cup√©rer tous les enfants et cours
    const enfants = await prisma.enfant.findMany();
    const cours = await prisma.coursGouvernemental.findMany();
    
    let progressionsCreated = 0;
    
    for (const enfant of enfants) {
      for (const coursItem of cours) {
        // V√©rifier si une progression existe d√©j√†
        const existingProgression = await prisma.progressionCours.findUnique({
          where: {
            enfantId_coursId: {
              enfantId: enfant.id,
              coursId: coursItem.id
            }
          }
        });
        
        if (!existingProgression) {
          // Cr√©er une progression initiale
          await prisma.progressionCours.create({
            data: {
              enfantId: enfant.id,
              coursId: coursItem.id,
              pourcentage: 0,
              tempsPasse: 0,
              statut: 'NON_COMMENCE',
              notes: `Progression initiale pour ${enfant.prenom}`
            }
          });
          progressionsCreated++;
        }
      }
    }
    
    if (progressionsCreated > 0) {
      activation.activatedSystems.push('Syst√®me de progression des cours');
      activation.createdRecords.progressions = progressionsCreated;
      console.log(`‚úÖ ${progressionsCreated} progressions de cours cr√©√©es`);
    } else {
      console.log('‚úÖ Syst√®me de progression d√©j√† actif');
    }

    // 2. Activer le syst√®me de suivi d'apprentissage
    console.log('\nüìä Activation du syst√®me de suivi d\'apprentissage...');
    
    let suivisCreated = 0;
    
    for (const enfant of enfants) {
      // Cr√©er un suivi d'apprentissage pour chaque enfant
      const existingSuivi = await prisma.suivis_apprentissage.findFirst({
        where: {
          enfantId: enfant.id,
          date: {
            gte: new Date(new Date().setHours(0, 0, 0, 0))
          }
        }
      });
      
      if (!existingSuivi) {
        await prisma.suivis_apprentissage.create({
          data: {
            enfantId: enfant.id,
            matiere: 'FRANCAIS', // Par d√©faut
            niveauScolaire: enfant.niveauScolaire || 'PRIMAIRE_1',
            tempsPasse: 0,
            coursCompletes: 0,
            competencesAcquises: [],
            observations: `Suivi initial pour ${enfant.prenom}`
          }
        });
        suivisCreated++;
      }
    }
    
    if (suivisCreated > 0) {
      activation.activatedSystems.push('Syst√®me de suivi d\'apprentissage');
      activation.createdRecords.suivis = suivisCreated;
      console.log(`‚úÖ ${suivisCreated} suivis d'apprentissage cr√©√©s`);
    } else {
      console.log('‚úÖ Syst√®me de suivi d√©j√† actif');
    }

    // 3. Activer les logs d'audit
    console.log('\nüìù Activation des logs d\'audit...');
    
    // Cr√©er un log d'audit pour l'activation des syst√®mes
    await prisma.audit_logs.create({
      data: {
        action: 'SYSTEM_ACTIVATION',
        cibleType: 'DATABASE',
        cibleId: 'SYSTEMS',
        metadata: {
          activatedSystems: activation.activatedSystems,
          timestamp: new Date().toISOString()
        },
        acteurId: (await prisma.user.findFirst())?.id || 'system'
      }
    });
    
    activation.activatedSystems.push('Syst√®me de logs d\'audit');
    activation.createdRecords.auditLogs = 1;
    console.log('‚úÖ Syst√®me de logs d\'audit activ√©');

    // 4. V√©rifier et cr√©er des abonnements pour les utilisateurs sans abonnement
    console.log('\nüí≥ V√©rification des abonnements...');
    
    const usersWithoutSubscription = await prisma.user.findMany({
      where: {
        abonnements: { none: {} }
      }
    });
    
    let abonnementsCreated = 0;
    
    for (const user of usersWithoutSubscription) {
      // Trouver un plan par d√©faut
      const defaultPlan = await prisma.plans.findFirst();
      
      if (defaultPlan) {
        await prisma.abonnements.create({
          data: {
            userId: user.id,
            planId: defaultPlan.id,
            statut: 'TRIAL',
            finPeriode: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 jours
          }
        });
        abonnementsCreated++;
      }
    }
    
    if (abonnementsCreated > 0) {
      activation.createdRecords.abonnements = abonnementsCreated;
      console.log(`‚úÖ ${abonnementsCreated} abonnements cr√©√©s`);
    } else {
      console.log('‚úÖ Tous les utilisateurs ont d√©j√† un abonnement');
    }

    // R√©sum√© de l'activation
    console.log('\nüìã R√©sum√© de l\'activation:');
    console.log(`Syst√®mes activ√©s: ${activation.activatedSystems.length}`);
    activation.activatedSystems.forEach(system => {
      console.log(`  - ${system}`);
    });
    
    console.log('\nüìä Enregistrements cr√©√©s:');
    Object.entries(activation.createdRecords).forEach(([type, count]) => {
      console.log(`  - ${type}: ${count}`);
    });

    // Recommandations post-activation
    activation.recommendations = [
      'Configurer des alertes pour les logs d\'audit importants',
      'Mettre en place un syst√®me de notifications pour les progressions',
      'Cr√©er des rapports automatiques de suivi d\'apprentissage',
      'Impl√©menter un syst√®me de r√©compenses bas√© sur les progressions'
    ];

    console.log('\nüí° Recommandations post-activation:');
    activation.recommendations.forEach(rec => console.log(`- ${rec}`));

    // Sauvegarder le rapport d'activation
    const fs = require('fs');
    fs.writeFileSync(
      'database-activation-report.json',
      JSON.stringify(activation, null, 2)
    );

    console.log('\n‚úÖ Rapport d\'activation sauvegard√© dans database-activation-report.json');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'activation:', error);
  } finally {
    await prisma.$disconnect();
  }
}

activateSystems();
